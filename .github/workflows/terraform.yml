name: "Infrastructure Deployment"

on:
    push:
      paths:
        - 'infrastructure/**'
      branches: [ main ]
    pull_request:
      types: [opened, synchronize, reopened]
      paths:
        - 'infrastructure/**'
    workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform:
    environment: prod
    name: "Terraform"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Debug Event Context
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Branch name: ${{ github.ref }}"
          echo "Is PR: ${{ github.event_name == 'pull_request' }}"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Debug Directory Contents
        run: |
          echo "Current directory:"
          pwd
          echo "Directory contents:"
          ls -la
          echo "Infrastructure directory contents:"
          ls -la infrastructure/terraform

      - name: Terraform Format
        working-directory: infrastructure/terraform
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        working-directory: infrastructure/terraform
        id: init
        run: terraform init
        env:
          TF_VAR_acm_certificate_arn: ${{ secrets.ACM_CERTIFICATE_ARN }}

      - name: Terraform Validate
        working-directory: infrastructure/terraform
        id: validate
        run: terraform validate

      - name: Terraform Plan
        working-directory: infrastructure/terraform
        id: plan
        # Removed the condition to always run plan
        run: |
          terraform plan -no-color -input=false > plan.txt
          echo "PLAN<<EOF" >> $GITHUB_OUTPUT
          cat plan.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        continue-on-error: true
        env:
          TF_VAR_acm_certificate_arn: ${{ secrets.ACM_CERTIFICATE_ARN }}

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Log repository information for debugging
            console.log('Repository context:', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pullNumber: context.payload.pull_request.number
            });

            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>`;
            
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              body: output,
              event: 'COMMENT'
            });

      - name: Terraform Apply
        working-directory: infrastructure
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        run: terraform apply -auto-approve -input=false
        env:
          TF_VAR_acm_certificate_arn: ${{ secrets.ACM_CERTIFICATE_ARN }}
